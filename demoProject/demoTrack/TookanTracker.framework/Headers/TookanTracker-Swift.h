// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreLocation;
@import CocoaAsyncSocket;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@protocol LocationTrackerDelegate;
@class CLLocationManager;
@class CLLocation;

SWIFT_CLASS("_TtC13TookanTracker19LocationTrackerFile")
@interface LocationTrackerFile : NSObject <CLLocationManagerDelegate>
@property (nonatomic, strong) id <LocationTrackerDelegate> _Null_unspecified delegate;
@property (nonatomic, copy) NSString * _Nonnull host;
@property (nonatomic) uint16_t portNumber;
@property (nonatomic) double slotTime;
@property (nonatomic) float maxSpeed;
@property (nonatomic) double maxAccuracy;
@property (nonatomic) double maxDistance;
@property (nonatomic, copy) NSString * _Nonnull accessToken;
@property (nonatomic, copy) NSString * _Nonnull uniqueKey;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (LocationTrackerFile * _Nonnull)sharedInstanceWithApiKey:(NSString * _Nonnull)apiKey;
+ (CLLocationManager * _Nonnull)sharedLocationManager;
- (CLLocation * _Nonnull)getCurrentLocation;
- (void)setLocationUpdate;
- (void)stopLocationTracking;
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
@end


SWIFT_CLASS("_TtC13TookanTracker21BackgroundTaskManager")
@interface BackgroundTaskManager : LocationTrackerFile
@end

@class CocoaMQTTWill;
@class CocoaMQTTMessage;
@class GCDAsyncSocket;

/**
  Main CocoaMQTT Class
  Notice: GCDAsyncSocket need delegate to extend NSObject
*/
SWIFT_CLASS("_TtC13TookanTracker9CocoaMQTT")
@interface CocoaMQTT : NSObject <GCDAsyncSocketDelegate>
@property (nonatomic, copy) NSString * _Nonnull host;
@property (nonatomic) uint16_t port;
@property (nonatomic, copy) NSString * _Nonnull clientId;
@property (nonatomic, copy) NSString * _Nullable username;
@property (nonatomic, copy) NSString * _Nullable password;
@property (nonatomic) BOOL secureMQTT;
@property (nonatomic) BOOL backgroundOnSocket;
@property (nonatomic) BOOL cleanSess;
@property (nonatomic) uint16_t keepAlive;
@property (nonatomic, strong) CocoaMQTTWill * _Nullable willMessage;
@property (nonatomic, copy) NSDictionary<NSNumber *, CocoaMQTTMessage *> * _Nonnull messages;
- (nonnull instancetype)initWithClientId:(NSString * _Nonnull)clientId host:(NSString * _Nonnull)host port:(uint16_t)port OBJC_DESIGNATED_INITIALIZER;
- (BOOL)connect;
- (uint16_t)publishWithMessage:(CocoaMQTTMessage * _Nonnull)message;
- (uint16_t)unsubscribeWithTopic:(NSString * _Nonnull)topic;
- (void)ping;
- (void)disconnect;
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didConnectToHost:(NSString * _Nonnull)host port:(uint16_t)port;
- (void)socketDidSecure:(GCDAsyncSocket * _Nonnull)sock;
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didWriteDataWithTag:(NSInteger)tag;
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didReadData:(NSData * _Nonnull)data withTag:(NSInteger)tag;
- (void)socketDidDisconnect:(GCDAsyncSocket * _Nonnull)sock withError:(NSError * _Nullable)err;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  MQTT Message
*/
SWIFT_CLASS("_TtC13TookanTracker16CocoaMQTTMessage")
@interface CocoaMQTTMessage : NSObject
@property (nonatomic, copy) NSString * _Nonnull topic;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull payload;
@property (nonatomic, readonly, copy) NSString * _Nullable string;
@property (nonatomic) BOOL retained;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/**
  MQTT Will Message
*/
SWIFT_CLASS("_TtC13TookanTracker13CocoaMQTTWill")
@interface CocoaMQTTWill : CocoaMQTTMessage
- (nonnull instancetype)initWithTopic:(NSString * _Nonnull)topic message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP13TookanTracker23LocationTrackerDelegate_")
@protocol LocationTrackerDelegate
@optional
- (void)currentLocation:(CLLocation * _Nonnull)location;
- (void)onLocationArrive:(NSArray<CLLocation *> * _Nonnull)locations message:(NSString * _Nonnull)message;
- (void)onJobComplete;
@end



@interface LocationTrackerFile (SWIFT_EXTENSION(TookanTracker))
- (void)stopTrackingService;
- (void)setApiKeyWithApiKey:(NSString * _Nonnull)apiKey;
@end


SWIFT_CLASS("_TtC13TookanTracker9MqttClass")
@interface MqttClass : NSObject
- (void)sendLocationWithLocation:(NSString * _Nonnull)location;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

@interface MqttClass (SWIFT_EXTENSION(TookanTracker))
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didConnect:(NSString * _Nonnull)host port:(NSInteger)port;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishAck:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didReceiveMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didSubscribeTopic:(NSString * _Nonnull)topic;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didUnsubscribeTopic:(NSString * _Nonnull)topic;
- (void)mqttDidPing:(CocoaMQTT * _Nonnull)mqtt;
- (void)mqttDidReceivePong:(CocoaMQTT * _Nonnull)mqtt;
- (void)mqttDidDisconnect:(CocoaMQTT * _Nonnull)mqtt withError:(NSError * _Nullable)err;
@end


@interface NSLocale (SWIFT_EXTENSION(TookanTracker))
@end


@interface UIButton (SWIFT_EXTENSION(TookanTracker))
@end


@interface UILabel (SWIFT_EXTENSION(TookanTracker))
@end


@interface UIView (SWIFT_EXTENSION(TookanTracker))
@end


@interface NSURLSession (SWIFT_EXTENSION(TookanTracker))
/**
  Return data from synchronous URL request
*/
+ (NSData * _Nullable)requestSynchronousData:(NSURLRequest * _Nonnull)request;
/**
  Return data synchronous from specified endpoint
*/
+ (NSData * _Nullable)requestSynchronousDataWithURLString:(NSString * _Nonnull)requestString;
/**
  Return JSON synchronous from URL request
*/
+ (id _Nullable)requestSynchronousJSON:(NSURLRequest * _Nonnull)request;
/**
  Return JSON synchronous from specified endpoint
*/
+ (id _Nullable)requestSynchronousJSONWithURLString:(NSString * _Nonnull)requestString;
@end

#pragma clang diagnostic pop
